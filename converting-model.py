# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AT1ssBIsQ_Hi1wqLm9bJCF6itpBiSRDV
"""

!pip install onnx
!pip install tf2onnx

!pip install opendatasets
import opendatasets as od
od.download(
    "https://www.kaggle.com/datasets/cngnguyntrnhu/normalize-ecg-dataset")

!pip install --upgrade onnxruntime

# import onnx
# import tf2onnx
import os
import tensorflow as tf
import numpy as np

SAMPLING_RATE=360
def resamplingData(x_train):
    #each data point represent for 36 point before and 109 point after
    pre_sample=int(SAMPLING_RATE*0.1)
    post_sample=int(SAMPLING_RATE*0.3+1)
    window=int(SAMPLING_RATE*0.4+1)
    new_arr=np.pad(x_train,(pre_sample,post_sample),'mean')
    resamplingXTrain=np.empty([x_train.shape[0],window],dtype="float32")
    for i in range(x_train.shape[0]):
#         print(i)
        resamplingXTrain[i,:window]=new_arr[i:i+window]
    return resamplingXTrain

train=np.load('normalize-ecg-dataset/train.npy')
test=np.load('normalize-ecg-dataset/test.npy')

train=resamplingData(train[:1000000])
test=resamplingData(test[:1000000])

!pip install --upgrade tensorflow
!pip install --upgrade keras
!pip install --upgrade onnxruntime

import keras
keras.__version__

import onnx
import tf2onnx
import os
import tensorflow as tf
import numpy as np

loaded_keras_model = tf.keras.models.load_model('model_run-0.h5')
loaded_keras_model.output_names=['output']
onnx_model, _ = tf2onnx.convert.from_keras(loaded_keras_model,input_signature=[tf.TensorSpec(shape=(None,145,1), dtype=tf.float32)])
onnx.save(onnx_model, 'qrsdet-model.onnx')

import onnxruntime

loaded_keras_model = tf.keras.models.load_model('model_run-0.h5')
loaded_keras_model.output_names=['output']

train=train.reshape(1000000,145,1)
test=train.reshape(1000000,145,1)

session = onnxruntime.InferenceSession("qrsdet-model.onnx")
session.get_inputs()[0].shape
session.get_inputs()[0].type

input_name = session.get_inputs()[0].name
output_name = session.get_outputs()[0].name

result = session.run([output_name], {input_name: train})
predicted_class_onnx = np.argmax(result, axis=None)
print(result)

import onnxruntime

session = onnxruntime.InferenceSession("qrsdet-model.onnx",providers=['CUDAExecutionProvider'])
session.get_inputs()[0].shape
session.get_inputs()[0].type


input_name = session.get_inputs()[0].name
output_name = session.get_outputs()[0].name


